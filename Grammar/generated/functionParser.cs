//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\mihan\source\repos\Course\\Grammar\function.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class functionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, VAR=22, MUL=23, DIV=24, ADD=25, 
		SUB=26, VALUE=27, POW=28, WHITESPACE=29, INT=30;
	public const int
		RULE_function = 0, RULE_expr = 1, RULE_skip = 2, RULE_math_func = 3, RULE_cos = 4, 
		RULE_sin = 5, RULE_tan = 6, RULE_cot = 7, RULE_exponent = 8, RULE_sqrt = 9, 
		RULE_abs = 10, RULE_acos = 11, RULE_asin = 12, RULE_atan = 13, RULE_cosh = 14, 
		RULE_sinh = 15, RULE_tanh = 16, RULE_ln = 17, RULE_log = 18;
	public static readonly string[] ruleNames = {
		"function", "expr", "skip", "math_func", "cos", "sin", "tan", "cot", "exponent", 
		"sqrt", "abs", "acos", "asin", "atan", "cosh", "sinh", "tanh", "ln", "log"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'cos'", "'sin'", "'tan'", "'cot'", "'e'", "'exp'", 
		"'sqrt'", "'abs'", "'acos'", "'asin'", "'atan'", "'cosh'", "'sinh'", "'tanh'", 
		"'ln'", "'log'", "'_'", "'{'", "'}'", null, "'*'", "'/'", "'+'", "'-'", 
		null, "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "VAR", "MUL", 
		"DIV", "ADD", "SUB", "VALUE", "POW", "WHITESPACE", "INT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "function.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static functionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public functionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public functionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FunctionContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(functionParser.Eof, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 0, RULE_function);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case VAR:
			case VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; expr(0);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Math_funcContext math_func() {
			return GetRuleContext<Math_funcContext>(0);
		}
		public ITerminalNode VALUE() { return GetToken(functionParser.VALUE, 0); }
		public ITerminalNode VAR() { return GetToken(functionParser.VAR, 0); }
		public ITerminalNode MUL() { return GetToken(functionParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(functionParser.DIV, 0); }
		public ITerminalNode POW() { return GetToken(functionParser.POW, 0); }
		public ITerminalNode ADD() { return GetToken(functionParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(functionParser.SUB, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 43; Match(T__0);
				State = 44; expr(0);
				State = 45; Match(T__1);
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
				{
				State = 47; math_func();
				}
				break;
			case VALUE:
				{
				State = 48; Match(VALUE);
				}
				break;
			case VAR:
				{
				State = 49; Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 61;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 53;
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 54; expr(7);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 55;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 56; Match(POW);
						}
						State = 57; expr(5);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 59;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 60; expr(5);
						}
						break;
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSkip(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSkip(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 4, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_funcContext : ParserRuleContext {
		public CosContext cos() {
			return GetRuleContext<CosContext>(0);
		}
		public SinContext sin() {
			return GetRuleContext<SinContext>(0);
		}
		public TanContext tan() {
			return GetRuleContext<TanContext>(0);
		}
		public CotContext cot() {
			return GetRuleContext<CotContext>(0);
		}
		public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public SqrtContext sqrt() {
			return GetRuleContext<SqrtContext>(0);
		}
		public AbsContext abs() {
			return GetRuleContext<AbsContext>(0);
		}
		public AcosContext acos() {
			return GetRuleContext<AcosContext>(0);
		}
		public AsinContext asin() {
			return GetRuleContext<AsinContext>(0);
		}
		public AtanContext atan() {
			return GetRuleContext<AtanContext>(0);
		}
		public CoshContext cosh() {
			return GetRuleContext<CoshContext>(0);
		}
		public SinhContext sinh() {
			return GetRuleContext<SinhContext>(0);
		}
		public TanhContext tanh() {
			return GetRuleContext<TanhContext>(0);
		}
		public LnContext ln() {
			return GetRuleContext<LnContext>(0);
		}
		public LogContext log() {
			return GetRuleContext<LogContext>(0);
		}
		public Math_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterMath_func(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitMath_func(this);
		}
	}

	[RuleVersion(0)]
	public Math_funcContext math_func() {
		Math_funcContext _localctx = new Math_funcContext(Context, State);
		EnterRule(_localctx, 6, RULE_math_func);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; cos();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; sin();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; tan();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 71; cot();
				}
				break;
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 72; exponent();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 73; sqrt();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 7);
				{
				State = 74; abs();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 8);
				{
				State = 75; acos();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 9);
				{
				State = 76; asin();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 10);
				{
				State = 77; atan();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 11);
				{
				State = 78; cosh();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 12);
				{
				State = 79; sinh();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 13);
				{
				State = 80; tanh();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 14);
				{
				State = 81; ln();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 15);
				{
				State = 82; log();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterCos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitCos(this);
		}
	}

	[RuleVersion(0)]
	public CosContext cos() {
		CosContext _localctx = new CosContext(Context, State);
		EnterRule(_localctx, 8, RULE_cos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__2);
			State = 86; Match(T__0);
			State = 87; expr(0);
			State = 88; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSin(this);
		}
	}

	[RuleVersion(0)]
	public SinContext sin() {
		SinContext _localctx = new SinContext(Context, State);
		EnterRule(_localctx, 10, RULE_sin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__3);
			State = 91; Match(T__0);
			State = 92; expr(0);
			State = 93; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TanContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterTan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitTan(this);
		}
	}

	[RuleVersion(0)]
	public TanContext tan() {
		TanContext _localctx = new TanContext(Context, State);
		EnterRule(_localctx, 12, RULE_tan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(T__4);
			State = 96; Match(T__0);
			State = 97; expr(0);
			State = 98; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CotContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterCot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitCot(this);
		}
	}

	[RuleVersion(0)]
	public CotContext cot() {
		CotContext _localctx = new CotContext(Context, State);
		EnterRule(_localctx, 14, RULE_cot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__5);
			State = 101; Match(T__0);
			State = 102; expr(0);
			State = 103; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		public ITerminalNode POW() { return GetToken(functionParser.POW, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 16, RULE_exponent);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(T__6);
				State = 106; Match(POW);
				State = 107; expr(0);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(T__7);
				State = 109; Match(T__0);
				State = 110; expr(0);
				State = 111; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqrtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SqrtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSqrt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSqrt(this);
		}
	}

	[RuleVersion(0)]
	public SqrtContext sqrt() {
		SqrtContext _localctx = new SqrtContext(Context, State);
		EnterRule(_localctx, 18, RULE_sqrt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T__8);
			State = 116; Match(T__0);
			State = 117; expr(0);
			State = 118; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AbsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAbs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAbs(this);
		}
	}

	[RuleVersion(0)]
	public AbsContext abs() {
		AbsContext _localctx = new AbsContext(Context, State);
		EnterRule(_localctx, 20, RULE_abs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(T__9);
			State = 121; Match(T__0);
			State = 122; expr(0);
			State = 123; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcosContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AcosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAcos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAcos(this);
		}
	}

	[RuleVersion(0)]
	public AcosContext acos() {
		AcosContext _localctx = new AcosContext(Context, State);
		EnterRule(_localctx, 22, RULE_acos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(T__10);
			State = 126; Match(T__0);
			State = 127; expr(0);
			State = 128; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsinContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAsin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAsin(this);
		}
	}

	[RuleVersion(0)]
	public AsinContext asin() {
		AsinContext _localctx = new AsinContext(Context, State);
		EnterRule(_localctx, 24, RULE_asin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(T__11);
			State = 131; Match(T__0);
			State = 132; expr(0);
			State = 133; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtanContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAtan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAtan(this);
		}
	}

	[RuleVersion(0)]
	public AtanContext atan() {
		AtanContext _localctx = new AtanContext(Context, State);
		EnterRule(_localctx, 26, RULE_atan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(T__12);
			State = 136; Match(T__0);
			State = 137; expr(0);
			State = 138; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoshContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CoshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterCosh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitCosh(this);
		}
	}

	[RuleVersion(0)]
	public CoshContext cosh() {
		CoshContext _localctx = new CoshContext(Context, State);
		EnterRule(_localctx, 28, RULE_cosh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(T__13);
			State = 141; Match(T__0);
			State = 142; expr(0);
			State = 143; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinhContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SinhContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSinh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSinh(this);
		}
	}

	[RuleVersion(0)]
	public SinhContext sinh() {
		SinhContext _localctx = new SinhContext(Context, State);
		EnterRule(_localctx, 30, RULE_sinh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(T__14);
			State = 146; Match(T__0);
			State = 147; expr(0);
			State = 148; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TanhContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TanhContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tanh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterTanh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitTanh(this);
		}
	}

	[RuleVersion(0)]
	public TanhContext tanh() {
		TanhContext _localctx = new TanhContext(Context, State);
		EnterRule(_localctx, 32, RULE_tanh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(T__15);
			State = 151; Match(T__0);
			State = 152; expr(0);
			State = 153; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LnContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ln; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterLn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitLn(this);
		}
	}

	[RuleVersion(0)]
	public LnContext ln() {
		LnContext _localctx = new LnContext(Context, State);
		EnterRule(_localctx, 34, RULE_ln);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(T__16);
			State = 156; Match(T__0);
			State = 157; expr(0);
			State = 158; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogContext : ParserRuleContext {
		public ITerminalNode[] INT() { return GetTokens(functionParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(functionParser.INT, i);
		}
		public LogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterLog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitLog(this);
		}
	}

	[RuleVersion(0)]
	public LogContext log() {
		LogContext _localctx = new LogContext(Context, State);
		EnterRule(_localctx, 36, RULE_log);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(T__17);
			State = 161; Match(T__18);
			State = 162; Match(T__19);
			State = 163; Match(INT);
			State = 164; Match(T__20);
			State = 165; Match(POW);
			State = 166; Match(T__19);
			State = 167; Match(INT);
			State = 168; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\xAD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '+', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x35', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '@', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x43', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', 't', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x2', '\x3', '\x4', '\x15', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', '\x4', '\x3', 
		'\x2', '\x19', '\x1A', '\x3', '\x2', '\x1B', '\x1C', '\x2', '\xAF', '\x2', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x4', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x44', '\x3', '\x2', '\x2', '\x2', '\b', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'W', '\x3', '\x2', '\x2', '\x2', '\f', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x61', '\x3', '\x2', '\x2', '\x2', '\x10', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 's', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x16', 'z', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x93', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '$', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xA2', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x5', '\x4', 
		'\x3', '\x2', ')', '+', '\a', '\x2', '\x2', '\x3', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', '\x3', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\b', '\x3', '\x1', '\x2', '-', '.', '\a', 
		'\x3', '\x2', '\x2', '.', '/', '\x5', '\x4', '\x3', '\x2', '/', '\x30', 
		'\a', '\x4', '\x2', '\x2', '\x30', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x35', '\x5', '\b', '\x5', '\x2', '\x32', '\x35', '\a', '\x1D', 
		'\x2', '\x2', '\x33', '\x35', '\a', '\x18', '\x2', '\x2', '\x34', ',', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x41', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\f', '\b', '\x2', '\x2', '\x37', '\x38', '\t', '\x2', '\x2', '\x2', '\x38', 
		'@', '\x5', '\x4', '\x3', '\t', '\x39', ':', '\f', '\a', '\x2', '\x2', 
		':', ';', '\a', '\x1E', '\x2', '\x2', ';', '@', '\x5', '\x4', '\x3', '\a', 
		'<', '=', '\f', '\x6', '\x2', '\x2', '=', '>', '\t', '\x3', '\x2', '\x2', 
		'>', '@', '\x5', '\x4', '\x3', '\a', '?', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x39', '\x3', '\x2', '\x2', '\x2', '?', '<', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'V', '\x5', '\n', '\x6', '\x2', 'G', 'V', 
		'\x5', '\f', '\a', '\x2', 'H', 'V', '\x5', '\xE', '\b', '\x2', 'I', 'V', 
		'\x5', '\x10', '\t', '\x2', 'J', 'V', '\x5', '\x12', '\n', '\x2', 'K', 
		'V', '\x5', '\x14', '\v', '\x2', 'L', 'V', '\x5', '\x16', '\f', '\x2', 
		'M', 'V', '\x5', '\x18', '\r', '\x2', 'N', 'V', '\x5', '\x1A', '\xE', 
		'\x2', 'O', 'V', '\x5', '\x1C', '\xF', '\x2', 'P', 'V', '\x5', '\x1E', 
		'\x10', '\x2', 'Q', 'V', '\x5', ' ', '\x11', '\x2', 'R', 'V', '\x5', '\"', 
		'\x12', '\x2', 'S', 'V', '\x5', '$', '\x13', '\x2', 'T', 'V', '\x5', '&', 
		'\x14', '\x2', 'U', '\x46', '\x3', '\x2', '\x2', '\x2', 'U', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'H', '\x3', '\x2', '\x2', '\x2', 'U', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'J', '\x3', '\x2', '\x2', '\x2', 'U', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'L', '\x3', '\x2', '\x2', '\x2', 'U', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'N', '\x3', '\x2', '\x2', '\x2', 'U', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'P', '\x3', '\x2', '\x2', '\x2', 'U', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x5', '\x2', '\x2', 'X', 
		'Y', '\a', '\x3', '\x2', '\x2', 'Y', 'Z', '\x5', '\x4', '\x3', '\x2', 
		'Z', '[', '\a', '\x4', '\x2', '\x2', '[', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\a', '\x6', '\x2', '\x2', ']', '^', '\a', '\x3', '\x2', '\x2', 
		'^', '_', '\x5', '\x4', '\x3', '\x2', '_', '`', '\a', '\x4', '\x2', '\x2', 
		'`', '\r', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\a', '\x2', 
		'\x2', '\x62', '\x63', '\a', '\x3', '\x2', '\x2', '\x63', '\x64', '\x5', 
		'\x4', '\x3', '\x2', '\x64', '\x65', '\a', '\x4', '\x2', '\x2', '\x65', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\b', '\x2', '\x2', 
		'g', 'h', '\a', '\x3', '\x2', '\x2', 'h', 'i', '\x5', '\x4', '\x3', '\x2', 
		'i', 'j', '\a', '\x4', '\x2', '\x2', 'j', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', '\t', '\x2', '\x2', 'l', 'm', '\a', '\x1E', '\x2', 
		'\x2', 'm', 't', '\x5', '\x4', '\x3', '\x2', 'n', 'o', '\a', '\n', '\x2', 
		'\x2', 'o', 'p', '\a', '\x3', '\x2', '\x2', 'p', 'q', '\x5', '\x4', '\x3', 
		'\x2', 'q', 'r', '\a', '\x4', '\x2', '\x2', 'r', 't', '\x3', '\x2', '\x2', 
		'\x2', 's', 'k', '\x3', '\x2', '\x2', '\x2', 's', 'n', '\x3', '\x2', '\x2', 
		'\x2', 't', '\x13', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\v', 
		'\x2', '\x2', 'v', 'w', '\a', '\x3', '\x2', '\x2', 'w', 'x', '\x5', '\x4', 
		'\x3', '\x2', 'x', 'y', '\a', '\x4', '\x2', '\x2', 'y', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\a', '\f', '\x2', '\x2', '{', '|', '\a', 
		'\x3', '\x2', '\x2', '|', '}', '\x5', '\x4', '\x3', '\x2', '}', '~', '\a', 
		'\x4', '\x2', '\x2', '~', '\x17', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '\r', '\x2', '\x2', '\x80', '\x81', '\a', '\x3', '\x2', 
		'\x2', '\x81', '\x82', '\x5', '\x4', '\x3', '\x2', '\x82', '\x83', '\a', 
		'\x4', '\x2', '\x2', '\x83', '\x19', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\xE', '\x2', '\x2', '\x85', '\x86', '\a', '\x3', '\x2', 
		'\x2', '\x86', '\x87', '\x5', '\x4', '\x3', '\x2', '\x87', '\x88', '\a', 
		'\x4', '\x2', '\x2', '\x88', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\xF', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x3', '\x2', 
		'\x2', '\x8B', '\x8C', '\x5', '\x4', '\x3', '\x2', '\x8C', '\x8D', '\a', 
		'\x4', '\x2', '\x2', '\x8D', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\x10', '\x2', '\x2', '\x8F', '\x90', '\a', '\x3', '\x2', 
		'\x2', '\x90', '\x91', '\x5', '\x4', '\x3', '\x2', '\x91', '\x92', '\a', 
		'\x4', '\x2', '\x2', '\x92', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x11', '\x2', '\x2', '\x94', '\x95', '\a', '\x3', '\x2', 
		'\x2', '\x95', '\x96', '\x5', '\x4', '\x3', '\x2', '\x96', '\x97', '\a', 
		'\x4', '\x2', '\x2', '\x97', '!', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\x12', '\x2', '\x2', '\x99', '\x9A', '\a', '\x3', '\x2', 
		'\x2', '\x9A', '\x9B', '\x5', '\x4', '\x3', '\x2', '\x9B', '\x9C', '\a', 
		'\x4', '\x2', '\x2', '\x9C', '#', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\a', '\x13', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x3', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\x4', '\x3', '\x2', '\xA0', '\xA1', '\a', 
		'\x4', '\x2', '\x2', '\xA1', '%', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', '\x14', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x15', '\x2', 
		'\x2', '\xA4', '\xA5', '\a', '\x16', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		' ', '\x2', '\x2', '\xA6', '\xA7', '\a', '\x17', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x1E', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x16', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', ' ', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		'\x17', '\x2', '\x2', '\xAB', '\'', '\x3', '\x2', '\x2', '\x2', '\b', 
		'*', '\x34', '?', '\x41', 'U', 's',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
